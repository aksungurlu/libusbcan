cmake_minimum_required( VERSION 3.0.1 )
project( usbcan )
set( CMAKE_BUILD_TYPE Release )
set( CMAKE_SKIP_BUILD_RPATH true )
set( CMAKE_C_STANDARD 99 )

# Architecture detection courtesy of BoringSSL
if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
    set(ARCH "x86_64")
elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "amd64")
    set(ARCH "x86_64")
elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "AMD64")
    # cmake reports AMD64 on Windows, but we might be building for 32-bit.
    if (CMAKE_CL_64)
	set(ARCH "x86_64")
    else()
	set(ARCH "x86")
    endif()
elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86")
    set(ARCH "x86")
elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i386")
    set(ARCH "x86")
elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i686")
    set(ARCH "x86")
elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "arm")
    set(ARCH "arm")
else()
    message(FATAL_ERROR "Unknown processor:" ${CMAKE_SYSTEM_PROCESSOR})
endif()

if( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
    set( CMAKE_C_FLAGS ${CMAKE_C_FLAGS} "-DOS_UNIX" )
    link_directories( lib/macos ./ )
elseif( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
    set( CMAKE_C_FLAGS ${CMAKE_C_FLAGS} "-DOS_UNIX -D_POSIX_C_SOURCES=200809L" )
    set( PROJECT_LINK_LIBS ${PROJECT_LINK_LIBS} usb )
    if( ${ARCH} EQUAL "arm" )
	link_directories( /lib/arm-linux-gnueabihf lib/rpi ./ )
    else(true)
	if( ${ARCH} EQUAL "x86_64" )
            link_directories( lib/linux_64bit ./ )
	else(true)
	    link_directories( lib/linux_32bit ./ )
	endif(${ARCH} EQUAL "x86_64")
    endif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm")
endif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

message(STATUS "Building for ${CMAKE_SYSTEM_NAME}/${ARCH}")

include_directories(include)
set( PROJECT_LINK_LIBS ${PROJECT_LINK_LIBS} Ginkgo_Driver )
set( LIB_SOURCES src/usbcan.c )

add_library( usbcan SHARED ${LIB_SOURCES} )
target_link_libraries( usbcan ${PROJECT_LINK_LIBS} )

set( UTIL_LINK_LIBS ${PROJECT_LINK_LIBS} usbcan )
set( DUMP_SOURCES utils/usbcandump.c )
add_executable( usbcandump ${DUMP_SOURCES} )
target_link_libraries( usbcandump ${UTIL_LINK_LIBS} )
